<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络编程学习笔记-1</title>
    <link href="/2024/10/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <url>/2024/10/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<p>国庆期间，我在B站游戏开发区知名UP主Voidmatrix的指导下对如何制作联机游戏进行了初步的学习，学习了服务器程序是如何与客户程序进行沟通，初步使用了SDL_net的TCP协议，此篇文章对学习、探索过程的按照时间顺序进行回顾。</p><span id="more"></span>  <h2 id="第一步-研究哈基米大冒险"><a href="#第一步-研究哈基米大冒险" class="headerlink" title="第一步-研究哈基米大冒险"></a>第一步-研究哈基米大冒险</h2><p>在此之前，我只有些许计算机网络的理论知识，对于网络编程基本上一无所知，所以第一步先是研究V佬的最新的联机游戏教程-哈基米大冒险的源码，哈基米大冒险的玩法和金山打字的生死时速相同，我没有去看源码中和玩法实现相关的内容，优先去找实现联机功能的部分, 要实现联机的功能，就要让客户端之间用相同的数据去渲染画面，在服务器程序源码便可以找到这些数据<br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/hachimi_server_data.png"><br>接着我便开始寻找程序是怎样同步数据，在速览客户端和服务器的源码后,确定了这两段代码就是实现数据同步的部分。</p><ul><li><p><strong>服务器</strong>:<br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/hachimi_server.png"><br>在服务器程序中定义了客户端可以发送的请求，在接收到客户端的请求后可以解析客户端请求的信息，然后响应客户端给客户端提供信息</p><blockquote><p>(我感觉就像定义了几个方法，然后客户端那边一调用就可以返回数据)  </p></blockquote></li><li><p><strong>客户端</strong>:<br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/hachimi_client.png"><br>客户端这边运行的过程总结一下:</p></li></ul><ol><li>客户端程序先会向服务器程序发送登陆请求，服务器返回玩家ID，若返回值不为-1则说明成功加入了游戏</li><li>发送请求获取文本的请求，获取打字游戏的文本</li><li>创建一个新线程，每隔一段时间发送一次同步请求，上传自己的游戏进度，并获取另外一个玩家的游戏进度。</li></ol><h2 id="第二步-制作联机版井字棋"><a href="#第二步-制作联机版井字棋" class="headerlink" title="第二步-制作联机版井字棋"></a>第二步-制作联机版井字棋</h2><p>在研究完最重要的实现数据同步的方法后，紧接着便开始着手实践，先从最简单的内容开始做起，联机版井字棋。<br>先从差异开始进行分析，联机版井字棋和哈基米大冒险有一个区别，哈基米大冒险客户端只会修改自己的进度数据，这个进度数据不会对另外一个客户端的操作产生影响，因此进度数据只需要同步没有什么限制，而井字棋不同，已经落子的地方不能再次落子，并且落子是回合制的，一人落一次子，不能在对方的回合落子。<br>理解了以上差异后便可以开始编写代码了:</p><ul><li><p><strong>服务器</strong>:<br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/jing_server.png"><br>定义了<strong>登陆</strong>、<strong>更新</strong>、<strong>落子</strong>三个请求，登陆请求会返回给玩家它的ID，更新请求会返回游戏数据 *(一个一维数组，共存储10个数字，前九个数字是棋盘信息，0为空，1、2为玩家落子点，第十个数字是游戏阶段，当为1、2时对应玩家1、2胜利)*，在V佬的提示下，使用了JSON文件进行传输，落子请求会接收一个2位数数字，十位数是玩家ID，个位数代表落子位置，服务器会存储当前落子的玩家ID，以及整个棋盘，若玩家ID正确，且落子位置合法，便会更新棋盘并且切换玩家ID。  </p></li><li><p><strong>客户端</strong>:<br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/jing_client.png"><br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/jing_client_2.png"><br>客户端这边和哈基米大冒险区别不算特别大，都是登陆、新建线程更新，主要的区别是玩家点击棋盘时会发送落子请求，携带落子位置的信息 *(不管点击的位置是不是有棋子，是不是当前落子的玩家都会发送，由服务器来处理)*。</p></li></ul><blockquote><p>在完成了联机版井字棋，兴冲冲的测试了几波，感觉十分良好，结果被抓出了没做平局检测（<br><img src="/../img/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/noooooooooooo.png">  </p></blockquote><h2 id="第三步-制作联机版提瓦特幸存者"><a href="#第三步-制作联机版提瓦特幸存者" class="headerlink" title="第三步-制作联机版提瓦特幸存者"></a>第三步-制作联机版提瓦特幸存者</h2><p>这部分内容因为最后制作的不算很好,我就大概讲一下制作的思路吧。 <em>(动画播放最刚开始没有想好所以没有同步，以及不知道什么地方写的有问题导致游戏操作时常会有特别大的延迟)</em>  </p><ul><li>初步思路: 我最刚开始想过服务器仅储存敌人、玩家、子弹的位置信息，然后像什么移动、击杀敌人之类的逻辑全丢在客户端当中去实现，和哈基米大冒险的设计基本一致，大概就是两个原版的提瓦特幸存者，中间用个服务器来同步数据,但是这样的设计会导致很多问题，在哈基米大冒险中不会出现数据的冲突，玩家一只会修改进度一，玩家二只会修改进度二，但是提瓦特幸存者中不一样，可能出现以下情况，玩家一被一个敌人击杀，而玩家二在这之前已经把那个敌人击杀，但是还未来得及更新服务器的数据，因此我抛弃了这样的设计。</li><li>最终思路: 客户端只负责向服务器发送携带玩家当前移动的方向信息的移动请求，子弹、玩家、敌人的位置更新、碰撞全部由服务器来进行处理，客户端还要时刻向服务器发送更新请求，服务器响应时，使用JSON文件将所有敌人、子弹、玩家的位置信息提供给客户端。<br>而后客户端再通过位置信息进行渲染 <em>(此处还应该携带一个提供时间信息的数据，客户端根据该时间进行动画渲染)</em></li></ul><h2 id="第四步-SDL-net初步学习"><a href="#第四步-SDL-net初步学习" class="headerlink" title="第四步-SDL_net初步学习"></a>第四步-SDL_net初步学习</h2><p>这一步做了个很简单东西，客户端不断的向服务器发送时间戳，服务器则在每次接收到客户端发送的数据后向所有客户端发送一个接收信息的计数。<br>更加重要的是学习了使用TCP协议传输数据和Select模型。<br>关于使用TCP协议进行数据传输有哪些需要注意的部分，我也写了篇博客：  </p><p>在这里大致介绍一下Select模型：<br>和HTTP协议每次完成请求、响应后就会断开连接不同，TCP协议的连接会持续存在，直到释放 <em>(实际上HTTP的步骤就是先建立个TCP连接完成请求、响应后释放TCP连接)</em><br>最开始我做了个循环，先接收所有客户端的数据，再向所有客户端发送数据，但是接收信息的过程实际上是会阻塞直到连接中有可接收的数据，因此我想到了为每个客户端都开一个线程，用于接收信息，这样就避免了阻塞对程序的影响。<br>然而为每个客户端单独开一个线程其实会造成很多浪费，每个线程大多数时间都在等待数据，因此诞生许多IO多路复用技术，Select模型就是其中一个。<br>在Select模型中，每个线程可以处理多个连接，当某个连接中有可用数据时，才会进行数据接收，这样就既避免了阻塞，又可以一个线程处理多个连接。</p><hr><blockquote><p>如果有小伙伴需要的话，源码位置：<a href="https://github.com/FlyingfishFantasticfan/net_project">https://github.com/FlyingfishFantasticfan/net_project</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>网络编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>C++</tag>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_net初体验-采取TCP协议进行数据传输需要注意的问题</title>
    <link href="/2024/10/05/SDL_net%E5%88%9D%E4%BD%93%E9%AA%8C-%E9%87%87%E5%8F%96TCP%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    <url>/2024/10/05/SDL_net%E5%88%9D%E4%BD%93%E9%AA%8C-%E9%87%87%E5%8F%96TCP%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>使用TCP协议进行数据传输，可以提供可靠有序的数据传输，相比于HTTP每次请求都要建立和关闭连接，TCP连接一旦建立可以保持长时间的连接，适合需要持续通信的应用，但是由于<em><strong>TCP协议是面向流的协议</strong></em>，它将数据视为一个连续的字节流，而不是独立的消息。因此，发送端发送的数据可能会被拆分成多个数据包，或者多个小数据包可能会被合并成一个大的数据包发送到接收端。因此在使用TCP协议进行数据传输前需要额外解决以下几个问题:  </p><span id="more"></span><h2 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h2><ul><li><p><strong>产生原因</strong>:  </p><ol><li>发送端的缓冲机制:TCP协议会将应用层的数据放入发送缓冲区，如果发送缓冲区中的数据量较小，TCP可能会将多个小数据包合并成一个大的数据包发送。</li><li>接收区同样存在接收缓冲区，若接收端应用程序读取速度较慢，接收缓冲区可能会积累多个数据包，读取时便会将这些数据包合并在一起。</li></ol></li><li><p><strong>解决方案</strong>:  </p><ol><li><strong>发送定长的消息</strong>，每个消息长度都是固定的，接收方每次只要读取固定长度的数据即可。</li><li><strong>首尾识别符</strong>，使用特殊的识别符来标志数据的开始和结束。</li><li><strong>数据头部添加长度信息</strong>，接收端先读取长度信息，再根据此信息去读取数据</li></ol></li></ul><h2 id="大小端问题"><a href="#大小端问题" class="headerlink" title="大小端问题"></a>大小端问题</h2><ul><li><strong>产生原因</strong>: 大小端问题是指两种不同的字节存储方式，大端序会将高字节存储在低地址，小端序则相反，例如存储0x  12 34 56 78时，在大端序会将其存储为12 34 56 78，小端序则会存储为78 56 34 12，在涉及存储和传输多字节数据时，均可能出现大小端问题。</li><li><strong>解决方案</strong>: 发送端和接收端都将数据转换为网络字节序(即大端序)，在SDL_net中在发送长度信息前调用SDL_SwapBE32,将长度信息转换为网络字节序，在接收信息时，也调用SDL_SwapBE32将网络字符序转换为主机字符序<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> networkLength;<br><span class="hljs-built_in">memcpy</span>(&amp;networkLength, buffer + bufferOffset, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-type">int</span> length = <span class="hljs-built_in">SDL_SwapBE32</span>(networkLength); <span class="hljs-comment">// 转换为主机字节序</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> length = timestamp.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> networkLength = <span class="hljs-built_in">SDL_SwapBE32</span>(length); <span class="hljs-comment">// 转换为网络字节序</span><br><span class="hljs-built_in">SDLNet_TCP_Send</span>(client, &amp;networkLength, <span class="hljs-built_in">sizeof</span>(networkLength));  <span class="hljs-comment">// 发送消息长度</span><br></code></pre></td></tr></table></figure><blockquote><p>SDL_SwapBE32原理是当主机字节序为小端字节序时会对字节序进行反转，反之则不变</p></blockquote></li></ul><h2 id="分段问题"><a href="#分段问题" class="headerlink" title="分段问题"></a>分段问题</h2><ul><li><strong>产生原因</strong>: TCP 是一种流协议，它不保证每次发送的数据包会以相同的大小和顺序到达接收端,数据可能会被分成多个片段发送。</li><li><strong>解决方案</strong>: 对数据是否完整接收进行判断，若不完整则持续接收信息直到完整接收再进行读取。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>C++</tag>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平台跳跃游戏:旋转跳跃不停歇-角色设计</title>
    <link href="/2024/09/15/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/"/>
    <url>/2024/09/15/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>我使用Godot制作了一个平台跳跃游戏，这篇文章将展示角色的设计 </p><span id="more"></span><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>按AD键左右移动<br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E7%A7%BB%E5%8A%A8.gif"></p><h3 id="跳跃"><a href="#跳跃" class="headerlink" title="跳跃"></a>跳跃</h3><p>按K键可以跳跃，可以跳过两格高<br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E8%B7%B3%E8%B7%83%E5%B1%95%E7%A4%BA.gif"><br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E8%B7%B3%E8%B7%83%E5%B1%95%E7%A4%BA2.gif"></p><h3 id="蓝滚"><a href="#蓝滚" class="headerlink" title="蓝滚"></a>蓝滚</h3><p>按L键可以翻滚，可以通过翻滚过仅一格高的空间，翻滚期间移动速度略微提高，并且受重力影响减少，在跳跃后翻滚可以跳的更高<br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E7%BF%BB%E6%BB%9A%E5%B1%95%E7%A4%BA.gif"><br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E8%B7%B3%E7%BF%BB%E6%BB%9A.gif"></p><h3 id="紫滚"><a href="#紫滚" class="headerlink" title="紫滚"></a>紫滚</h3><p>蓝滚期间跳跃触发紫滚，继承蓝滚的一切特性，跳跃高度降低，但是速度十分快，可以跨过很远的距离<br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E7%B4%AB%E6%BB%9A.gif"></p><h3 id="金滚"><a href="#金滚" class="headerlink" title="金滚"></a>金滚</h3><p>在蓝滚后不立即跳跃，可以在紫滚期间再一次进行翻滚，触发金滚，金滚期间无法改变移动方向<br><img src="/../img/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%EF%BC%9A%E6%97%8B%E8%BD%AC%E8%B7%B3%E8%B7%83%E4%B8%8D%E5%81%9C%E6%AD%87-%E8%A7%92%E8%89%B2%E8%AE%BE%E8%AE%A1/%E9%87%91%E6%BB%9A.gif"></p>]]></content>
    
    
    <categories>
      
      <category>平台跳跃游戏:旋转跳跃不停歇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>Godot</tag>
      
      <tag>平台跳跃</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Godot全节点速览：2D节点</title>
    <link href="/2024/09/05/Godot%E5%85%A8%E8%8A%82%E7%82%B9%E9%80%9F%E8%A7%88%EF%BC%9A2D%E8%8A%82%E7%82%B9-1/"/>
    <url>/2024/09/05/Godot%E5%85%A8%E8%8A%82%E7%82%B9%E9%80%9F%E8%A7%88%EF%BC%9A2D%E8%8A%82%E7%82%B9-1/</url>
    
    <content type="html"><![CDATA[<p>节点是Godot的基础概念，通过节点和节点的组合，我们可以创建出复杂的游戏场景，我观看了<a href="https://www.bilibili.com/video/BV1ob4y1G7s1/?spm_id_from=333.880.my_history.page.click&vd_source=05dbda716a80e2e65ab973742bb8b79c">B站搬运42分钟内解释所有219个 Godot 节点!</a>，结合自己阅读官方文档以及实践对Godot全节点记录笔记。</p><span id="more"></span><h3 id="Node2D"><a href="#Node2D" class="headerlink" title="Node2D"></a>Node2D</h3><p><strong>简介</strong>：2D游戏对象，被所有2D相关节点继承。<br><strong>属性</strong>：</p><ul><li>Vector2 <em>global_position</em>：全局位置，存x，y坐标</li><li>float <em>global_rotation</em>：全局旋转，存旋转弧度</li><li>float <em>global_ratation_degrees</em>：全局旋转，存旋转度数</li><li>Vector2 <em>global_scale</em>：全局缩放，存x，y缩放比例</li><li>float <em>global_scale</em>：全局倾斜，存倾斜弧度</li><li>Transform2D <em>global_transform</em>：全局 <a href="https://docs.godotengine.org/zh-cn/4.x/classes/class_transform2d.html#class-transform2d">Transform2D</a>，存2D变化矩阵</li></ul><p>所有的属性均有相对于父节点的局部属性。<br><strong>作用</strong>：使用 Node2D 作为父节点可以移动、缩放和旋转 2D 项目中的子节点。还可以控制节点的渲染顺序。  </p><h3 id="Sprite2D"><a href="#Sprite2D" class="headerlink" title="Sprite2D"></a>Sprite2D</h3><p><strong>简介</strong>：显示 2D 纹理的节点。<br><strong>属性</strong>：</p><ul><li>Texture2D <em>texture</em>：要绘制的Texture2D对象</li><li>Vector2 <em>offset</em>：纹理绘图偏移量，存x，y上偏移的值</li><li>bool <em>centered</em>：是否居中，为 true时，纹理居中</li><li>bool <em>flip_v</em>：是否垂直翻转，为true时，纹理垂直翻转</li><li>bool <em>flip_h</em>：是否水平翻转，为true时，纹理水平翻转</li><li>int <em>frame</em>：当前显示帧，可以在Sprite2D中导入精灵表，储存当前显示第几帧</li><li>Vector2i <em>frame_coords</em>：当前显示帧在精灵表中的坐标，储存此帧在第几行第几列。</li><li>int <em>hframe</em>：在精灵表中的列数</li><li>int <em>vframe</em>：在精灵表中的行数</li><li>bool <em>region_enabled</em>：是否开启区域裁剪，为ture时，可以从一个较大的纹理中裁剪部分区域</li><li>bool <em>region_filter_clip_enabled</em>：是否开启区域过滤裁剪，为true时，只处理或显示指定区域内的内容，而忽略区域外的部分</li><li>Rect2 <em>region_rect</em>：显示的区域，储存显示区域的范围<br><strong>作用</strong>：通用的2D纹理渲染。</li></ul><h3 id="AnimatedSprite2D"><a href="#AnimatedSprite2D" class="headerlink" title="AnimatedSprite2D"></a>AnimatedSprite2D</h3><p><strong>简介</strong>：与Sprite2D节点类似，但是包含多张纹理，可用作动画。</p><p><strong>属性</strong>：</p><ul><li>SpriteFrames <em>sprite_frames</em>：包含动画帧的SpriteFrames资源</li><li>String <em>animation</em>：当前播放的动画名称</li><li>int <em>frame</em>：当前显示的帧索引</li><li>float <em>speed_scale</em>：动画播放速度的缩放因子</li><li>bool <em>playing</em>：是否正在播放动画</li><li>bool <em>centered</em>：是否将精灵居中</li><li>Vector2 <em>offset</em>：绘制偏移量</li><li>bool <em>flip_h</em>：是否水平翻转</li><li>bool <em>flip_v</em>：是否垂直翻转</li></ul><p><strong>作用</strong>：用于创建和播放2D精灵动画，适合用于角色、物品或环境中的动态元素。</p><h3 id="CollisionShape2D"><a href="#CollisionShape2D" class="headerlink" title="CollisionShape2D"></a>CollisionShape2D</h3><p><strong>简介</strong>：定义2D碰撞形状的节点。</p><p><strong>属性</strong>：</p><ul><li>Shape2D <em>shape</em>：用于碰撞检测的Shape2D资源</li><li>bool <em>disabled</em>：是否禁用碰撞形状</li></ul><p><strong>作用</strong>：为物理对象定义碰撞区域，通常作为PhysicsBody2D或Area2D的子节点使用。</p><h3 id="Area2D"><a href="#Area2D" class="headerlink" title="Area2D"></a>Area2D</h3><p><strong>简介</strong>：2D区域检测节点，用于检测其他物体的进入和退出。</p><p><strong>属性</strong>：</p><ul><li>int <em>collision_layer</em>：碰撞层，决定区域属于哪些层</li><li>int <em>collision_mask</em>：碰撞掩码，决定区域可以与哪些层交互</li><li>bool <em>monitorable</em>：是否可被其他Area2D监视</li><li>bool <em>monitoring</em>：是否监视其他物体的进入和退出</li></ul><p><strong>作用</strong>：用于触发区域、检测重叠、实现简单的碰撞等。常用于实现拾取物品、触发事件等功能。</p><h3 id="StaticBody2D"><a href="#StaticBody2D" class="headerlink" title="StaticBody2D"></a>StaticBody2D</h3><p><strong>简介</strong>：静态物理节点，用于表示不会移动的物体。</p><p><strong>属性</strong>：</p><ul><li>float <em>constant_linear_velocity</em>：恒定线性速度</li><li>float <em>constant_angular_velocity</em>：恒定角速度</li><li>int <em>collision_layer</em>：碰撞层，决定物体属于哪些层</li><li>int <em>collision_mask</em>：碰撞掩码，决定物体可以与哪些层交互</li><li>float <em>friction</em>：摩擦系数</li><li>float <em>bounce</em>：弹性系数</li><li>PhysicsMaterial <em>physics_material_override</em>：物理材质覆盖，用于自定义物理属性</li></ul><p><strong>作用</strong>：用于创建不受物理影响的静态物体，如墙壁、地面、平台等。常用于构建游戏世界的固定元素。</p><h3 id="GpuParticles2D"><a href="#GpuParticles2D" class="headerlink" title="GpuParticles2D"></a>GpuParticles2D</h3><p><strong>简介</strong>：用于在GPU上模拟和渲染2D粒子的节点。</p><p><strong>属性</strong>：</p><ul><li>int <em>amount</em>：粒子数量</li><li>float <em>lifetime</em>：每个粒子的生命周期</li><li>bool <em>one_shot</em>：是否为一次性粒子效果</li><li>bool <em>preprocess</em>：预处理时间，用于在粒子系统开始时预先模拟粒子</li><li>bool <em>explosiveness</em>：粒子发射的爆发性</li><li>float <em>speed_scale</em>：粒子系统的速度缩放因子</li><li>Vector2 <em>gravity</em>：粒子受重力影响的方向和强度</li><li>float <em>angle</em>：粒子发射的初始角度</li><li>float <em>angle_random</em>：粒子发射角度的随机性</li><li>float <em>scale</em>：粒子的初始缩放</li><li>float <em>scale_random</em>：粒子缩放的随机性</li><li>Color <em>color</em>：粒子的初始颜色</li><li>float <em>color_random</em>：粒子颜色的随机性</li><li>bool <em>emitting</em>：是否正在发射粒子</li></ul><p><strong>作用</strong>：用于创建高性能的2D粒子效果，适合用于火焰、烟雾、爆炸等视觉效果。</p><hr><p>以上就是比较常用的2D节点，使用这些节点便可以制作大部分的2D游戏，如果想要游戏更加具有质感，可以从粒子效果、光照、音效系统进行入手。</p><p>还是建议多去阅读官方文档，我自己在学习Godot的过程中，尝试制作了一个带有音效、粒子效果等等增加游戏质感的内容，我遇到了很多问题，比方说粒子该如何发射、粒子颜色如何设置等等，这些问题基本都可以在官方文档中找到。</p>]]></content>
    
    
    <categories>
      
      <category>零基础新手Godot快速入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识快速上手Godot</title>
    <link href="/2024/09/01/%E5%88%9D%E8%AF%86%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BGodot/"/>
    <url>/2024/09/01/%E5%88%9D%E8%AF%86%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BGodot/</url>
    
    <content type="html"><![CDATA[<p>我记录并收集了自己学习Godot游戏引擎的过程，希望对想要入门Godot的新手有所帮助。  </p><span id="more"></span><h1 id="Godot入门"><a href="#Godot入门" class="headerlink" title="Godot入门"></a>Godot入门</h1><h3 id="熟悉Godot操作"><a href="#熟悉Godot操作" class="headerlink" title="熟悉Godot操作"></a>熟悉Godot操作</h3><ul><li>视频跟做：<a href="%5B%E3%80%90%E7%B2%BE%E5%93%81%E7%86%9F%E8%82%89%E3%80%91%E6%83%B3%E5%9C%A82024%E5%B9%B4%E5%81%9A%E6%B8%B8%E6%88%8F%EF%BC%9F%E8%B7%9F%E7%9D%80Brackeys%E6%9D%A5%E5%AD%A6Godot%E5%BC%95%E6%93%8E%E5%90%A7%EF%BC%81_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV17Z421J7uF/?spm_id_from=333.880.my_history.page.click)">B站搬运油管大佬Brackeys的Godot入门</a></li><li>作者：Brackeys</li></ul><p><img src="/../img/Godot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/mqdefault.jpg"></p><p>学习Godot可以先从熟悉Godot的基本概念以及界面操作开始，如何创建游戏场景、如何创建精灵、怎么编写脚本、怎么导出项目，通过完成一个小型的平台跳跃游戏并将其导出，你便可以熟悉这些内容。  </p><p>这个视频全长1小时17分钟，视频并不枯燥制作十分优秀，全视频中仅编写了几个简单的脚本并且是手把手带着做，对于无编程基础或是没学过GDScript的新手友好，视频的作者Brackeys曾是油管最受欢迎的Unity游戏引擎视频主。  </p><h3 id="学习GDScirpt"><a href="#学习GDScirpt" class="headerlink" title="学习GDScirpt"></a>学习GDScirpt</h3><ul><li>文档阅读：<a href="https://reimenn.github.io/MyGDSciprtBook/GDScript.html">GDScript 零基础图文入门</a></li><li>作者：Rika</li></ul><p>在Godot中制作游戏离不开编程，Godot主要支持使用GDScirpt、C#、C++进行编程，GDScript是专门为Godot编写的脚本语言，契合度非常高，并且设计的比通用程序设计语言简单，学习成本低，使用GDScirpt可以让新手专注于游戏本身，不过多被技术问题困扰。</p><p>该文档介绍了GDScirpt的变量、循环、判断等基础知识，稍带有面向对象思想的讲解以及引擎交互的讲解，同时有简单的实战项目便于理解、学习。</p><hr><pre><code class="hljs">在完成了以上内容后已经具备了初步进行一些简单的2D游戏开发能力，可以尝试把先前视频跟做的项目更加完善，制作多个关卡、增加攻击敌人的玩法等等。</code></pre><h1 id="Godot精进"><a href="#Godot精进" class="headerlink" title="Godot精进"></a>Godot精进</h1><p>接下来可以选择跟做<a href="https://reimenn.github.io/MyGDSciprtBook/Part1/%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB.html">功能更加复杂的项目</a>或是阅读<a href="https://docs.godotengine.org/zh-cn/4.x/">官方文档</a>，我也会在接下来学习Godot的过程中不断分享自己的经验和知识。</p><p>可以从以下内容继续</p><h3 id="1-深入学习Godot的节点系统"><a href="#1-深入学习Godot的节点系统" class="headerlink" title="1. 深入学习Godot的节点系统"></a>1. 深入学习Godot的节点系统</h3><p>Godot的节点系统是其核心特性之一。深入理解各种节点的功能和用法，可以让你更灵活地构建游戏场景和功能。重点关注常用的节点如Node2D、Sprite、Area2D、KinematicBody2D等。</p><h3 id="2-掌握信号系统"><a href="#2-掌握信号系统" class="headerlink" title="2. 掌握信号系统"></a>2. 掌握信号系统</h3><p>信号系统是Godot中实现对象间通信的重要机制。学习如何创建、连接和使用信号，可以让你的游戏逻辑更加清晰和模块化。</p><h3 id="3-学习资源系统"><a href="#3-学习资源系统" class="headerlink" title="3. 学习资源系统"></a>3. 学习资源系统</h3><p>了解Godot的资源系统，包括如何创建、加载和使用各种资源（如场景、脚本、纹理等），可以帮助你更好地管理游戏资产。</p><h3 id="4-动画系统"><a href="#4-动画系统" class="headerlink" title="4. 动画系统"></a>4. 动画系统</h3><p>Godot提供了强大的动画系统。学习使用AnimationPlayer和AnimationTree可以让你创建更生动的游戏角色和场景。</p><h3 id="5-用户界面设计"><a href="#5-用户界面设计" class="headerlink" title="5. 用户界面设计"></a>5. 用户界面设计</h3><p>掌握Godot的UI系统，学习使用Control节点和主题资源，可以帮助你创建美观且功能丰富的游戏界面。</p><h3 id="6-物理系统"><a href="#6-物理系统" class="headerlink" title="6. 物理系统"></a>6. 物理系统</h3><p>深入学习Godot的2D和3D物理系统，可以让你创建更真实的游戏世界。了解刚体、碰撞检测、关节等概念，以及如何在游戏中应用这些物理效果。</p><h3 id="7-着色器编程"><a href="#7-着色器编程" class="headerlink" title="7. 着色器编程"></a>7. 着色器编程</h3><p>学习Godot的着色器语言可以让你创造出独特的视觉效果。从简单的2D着色器开始，逐步过渡到更复杂的3D着色器。</p><h3 id="8-网络多人游戏"><a href="#8-网络多人游戏" class="headerlink" title="8. 网络多人游戏"></a>8. 网络多人游戏</h3><p>探索Godot的网络功能，学习如何创建多人在线游戏。了解客户端-服务器架构、同步策略等概念。</p><h3 id="9-性能优化"><a href="#9-性能优化" class="headerlink" title="9. 性能优化"></a>9. 性能优化</h3><p>随着项目规模的增长，性能优化变得越来越重要。学习如何使用Godot的性能分析工具，以及各种优化技巧。</p><h3 id="10-跨平台开发"><a href="#10-跨平台开发" class="headerlink" title="10. 跨平台开发"></a>10. 跨平台开发</h3><p>Godot支持多平台开发。学习如何为不同平台（如PC、移动设备、Web）构建和优化你的游戏。</p><p>通过深入学习这些方面，你将能够充分利用Godot引擎的强大功能，创造出更加复杂和有趣的游戏。记住，实践是最好的学习方法，所以在学习的过程中，不断尝试将所学知识应用到实际项目中。</p>]]></content>
    
    
    <categories>
      
      <category>零基础新手Godot快速入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卡牌肉鸽重启计划！！！</title>
    <link href="/2024/08/28/%E5%8D%A1%E7%89%8C%E8%82%89%E9%B8%BD%E9%87%8D%E5%90%AF%E8%AE%A1%E5%88%92%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2024/08/28/%E5%8D%A1%E7%89%8C%E8%82%89%E9%B8%BD%E9%87%8D%E5%90%AF%E8%AE%A1%E5%88%92%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p><img src="/../img/avatar.png" alt="1"></p>]]></content>
    
    
    <categories>
      
      <category>卡牌肉鸽开发日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏开发</tag>
      
      <tag>卡牌肉鸽</tag>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
